
1. 장고 
- model : DB등의 데이터를 저장하는 객체 역할
- view : 모델의 데이터를 가공 후 템플릿에 전달하는 역할
- url : 웹사이트 주소와 view 함수 연결해줌.
- templete : 사용자에게 보여지는 UI 화면

<기억력 게임 구현> 
→  pygame 사용 부적합. (데스크탑 앱을 만드는 용도)


main()역할을 수행하는 부분에 추가할 라이브러리 

⭐from django.urls import path, include  
 : 다른 사이트의 URL을 포함할 구 있게. 



1. model : 점수 저장용 class 정의 [Class GameResults]
   
2. view: 점수 저장 api  함수로 정의 [def save_score]

<http 요청 메소드 >
- GET : 데이터 요청 (조회)
- POST: 데이터 전송 (등록,처리)

```예시 코드
@csrf_exempt
def save_score(request):
    if request.method == 'POST':
        data = json.loads(request.body)
        user_id = data.get('user_id') 
        score = data.get('score')
        GameResult.objects.create(user_id=user_id, score=score)
        return JsonResponse({'status': 'success'})
    return JsonResponse({'error': 'Invalid request'}, status=400)

```

3. templete: html+css+javascript게임 구현 

_________________________________________________________________________________________________________________

<h1> 1. model에서 사용하는 라이브러리.</h1>


❤️import uuid
: 사용자 고유ID를 생성하는 파이썬 표준 라이브러리 

 사용 방식 : 32개의 16진수로 구성되며 5개의 그룹으로 표시되고 각 그룹은 붙임표(-)로 구분
 [280a8a4d-a27f-4d01-b031-2a003cc4c039]
 
 UUID는 경우의 수가 엄청 많아 중복이 안되서  데이터베이스의  주키(primary key)로 종종 사용됨.



<h1> 2. view에서 사용하는 라이브러리. </h1>


❤️from django.http import JsonResponse        
: 클라이언트에 JSON 응답



❤️from django.shortcuts import render        

render(): templete에 작성한 코드를 읽어서 html코드를 웹페이지로 바꿔주는 과정. 
-> render() 사용시 핑수 인자:  templete_name과 request



❤️from django.views.decorators.csrf import csrf_exempt 
csrf_exempt():장고가 보안 때문에 **POST 요청을 막는 기능(CSRF 보호)**이 있는데,
 그 보안검사를 "일시적으로 끄는" 용도로 사용됨. (개발 중에만 사용해야 함. )



❤️from .models import GameResult              
: model에서 만들었던 Class이름  호출



❤️import json                               
: 파이썬에서 json을 쓸수 있게 함. 

json: 자바스크립트의 객체 표기법.일종의 형식. 
-> 데이터를 쉽게 교환, 저장하기 위한 텍스처 기반 데이터 표준. 

형식: 키와 값으로 되어 있음. 
사용 방식: 웹에서 서버로 데잍 보낼때. api 응답 받을때  
[프론트 → 요청 → 서버(API) → 응답 → 프론트 → 화면 반영]


